# CREATIVE MANAGEMENT SYSTEM - COMPLETE CODEBASE
# Generated on: 2024-12-19 (Updated after latest GitHub pull)
# Excludes: node_modules, .next, next-env.d.ts, next.config.ts
# Includes: All .ts and .tsx files
# 
# LATEST UPDATES FROM GITHUB:
# - SingleCreativeView.tsx: Major overhaul with HTML editor, proofreading, and LLM integration
# - MultipleCreativeView.tsx: Enhanced with ImagePreview component and better error handling
# - BACKEND_TODO_COMPREHENSIVE_AUDIT.md: Removed (completed)
# - Enhanced file upload handling and image preview functionality

================================================================================
FILE: app/Constants/Constants.ts
================================================================================

/*
 * TODO: BACKEND INTEGRATION - EVERFLOW API INTEGRATION
 * 
 * The following sections need to be integrated with Everflow API:
 * 
 * 1. OFFER DATA:
 *    - Current offer options are placeholders for frontend development
 *    - Backend should implement API endpoint to fetch offers from Everflow
 *    - API endpoint: GET /api/everflow/offers
 *    - Expected response format: Array of { label: string, value: string }
 *    - Consider implementing caching for better performance
 * 
 * 2. OFFER SEARCH:
 *    - Frontend search is already implemented and ready for backend integration
 *    - Search filtering can be moved to backend for better performance with large datasets
 *    - Consider implementing server-side search with pagination
 * 
 * 3. AUTHENTICATION:
 *    - Ensure Everflow API credentials are properly secured
 *    - Implement proper error handling for API failures
 *    - Add rate limiting to prevent API abuse
 * 
 * 4. ERROR HANDLING:
 *    - Handle cases when Everflow API is unavailable
 *    - Provide fallback options or graceful degradation
 *    - Log errors for monitoring and debugging
 * 
 * 5. PERFORMANCE:
 *    - Implement offer data caching (Redis recommended)
 *    - Consider lazy loading for large offer lists
 *    - Add loading states and skeleton screens
 * 
 * Frontend is ready and will automatically work once backend provides the API endpoint.
 */

export const Constants = {
    logo: "/Logo.svg",
    background: "/Background.svg",

    // Form Constants
    formTitle: "Submit Your Creatives For Approval",
    formDescription: "Upload your static images or HTML creatives with offer details to begin the approval process. Our team will review and notify you shortly.",

    // Form Fields
    formFields: [
        {
            label: "Affiliate ID",
            name: "affiliateId",
            type: "text",
            placeholder: "Enter Affiliate ID",
        },
        {
            label: "Company Name",
            name: "companyName",
            type: "text",
            placeholder: "Enter Company Name",
        },
        {
            label: "First Name",
            name: "firstName",
            type: "text",
            placeholder: "Enter First Name",
        },
        {
            label: "Last Name",
            name: "lastName",
            type: "text",
            placeholder: "Enter Last Name",
        },
        {
            label: "Email",
            name: "email",
            type: "email",
            placeholder: "Enter Email",
        },
        {
            label: "Telegram ID (Optional)",
            name: "telegramId",
            type: "text",
            placeholder: "Enter Telegram ID",
        },
        {
            label: "Offer ID",
            name: "offerId",
            type: "select",
            options: [
                // TODO: BACKEND INTEGRATION - Replace with Everflow API data
                // These are placeholder offers for frontend development only
                // Backend should fetch real offers from Everflow API endpoint
                { label: "Loading offers...", value: "loading" },
            ],
            placeholder: "Select Offer",
        },
        {
            label: "Creative Type",
            name: "creativeType",
            type: "select",
            options: [
                { label: "Email", value: "email" },
                { label: "Display", value: "display" },
                { label: "Search", value: "search" },
                { label: "Social", value: "social" },
                { label: "Native", value: "native" },
                { label: "Push", value: "push" },
            ],
            placeholder: "Select Creative Type",
        },
        {
            label: "Additional Notes or Requests for Client",
            name: "additionalNotes",
            type: "textarea",
            placeholder: "Enter Additional Notes or Requests for Client",
        },
        {
            label: "From Lines",
            name: "fromLines",
            type: "textarea",
            placeholder: "Enter From Lines",
            },
        {
            label: "Subject Lines",
            name: "subjectLines",
            type: "textarea",
            placeholder: "Enter Subject Lines",
        },
    ],

    // Upload Creative Types
    uploadCreativeTypes: [ 
        { label: "Single Creative", value: "singleCreative" },
        { label: "Multiple Creatives", value: "multipleCreatives" },
        { label: "From & Subject Lines", value: "fromSubjectLines" },
    ],

    // Button Texts
    buttonTexts: {
        next: "Next",
        previous: "Previous",
        submit: "Submit Creative",
        loading: "Loading...",
        verifying: "Verifying...",
        verify: "Verify",
        verified: "Verified",
        startBot: "Start Bot",
        nextStep2: "Save & Add Contact Details",
        prevStep1: "Edit Personal Details",
        nextStep3: "Save & Add Creative Details",
        prevStep2: "Edit Contact Details",
    },

    // Step Labels
    stepLabels: {
        step1: "Personal Details",
        step2: "Contact Details", 
        step3: "Creative Details",
    },

    // Current Step
    currentStep: [
        {
            stepNumber: 1,
            stepLabel: "Personal Details",
        },
        {
            stepNumber: 2,
            stepLabel: "Contact Details",
        },
        {
            stepNumber: 3,
            stepLabel: "Creative Details",
        },
    ],
    
    totalSteps: 3,

    // Verification Steps
    verificationSteps: [
        "Click on Start Bot Button",
        "Send /start to the bot",
        "Come back and Verify again",
    ],

    // From & Subject Lines Configuration
    fromSubjectLinesConfig: {
        title: "From & Subject Lines",
        description: "Enter compelling from lines and subject lines for your email campaigns",
        guidelines: {
            title: "Email Content Guidelines:",
            items: [
                "From Lines: Enter the sender name/email that will appear in the \"From\" field",
                "Subject Lines: Enter compelling subject lines to improve email open rates",
                "Multiple Lines: You can enter multiple options separated by line breaks",
                "Best Practices: Keep subject lines under 50 characters for better display"
            ]
        },
        fromLines: {
            label: "From Lines *",
            placeholder: "Enter from lines",
            helpText: "Enter multiple from lines separated by line breaks. Each line will be used as an option.",
            required: true
        },
        subjectLines: {
            label: "Subject Lines *",
            placeholder: "Enter subject lines",
            helpText: "Enter multiple subject lines separated by line breaks. Each line will be used as an option.",
            required: true
        },
        buttons: {
            save: "Save Lines",
            cancel: "Cancel"
        },
        characterCount: {
            fromLines: "From Lines: {count} characters",
            subjectLines: "Subject Lines: {count} characters"
        }
    },

    // Prority
    priorityLevels: [
        { name: "High", value: "high" },
        { name: "Medium", value: "medium" },
    ]
}

================================================================================
FILE: app/page.tsx
================================================================================

import CreativeForm from "@/app/Form/CreativeForm";

export default function Home() {
  return (
   <main>
    <CreativeForm />
   </main>
  );
}

================================================================================
FILE: app/layout.tsx
================================================================================

import type { Metadata } from "next";
import { Inter } from "next/font/google";
import "./globals.css";

const inter = Inter({
  variable: "--font-inter",
  subsets: ["latin"],
});

export const metadata: Metadata = {
  title: "Creative Submission Form - Big Drops Marketing Group",
  description: "Submit your creatives for approval with Big Drops Marketing Group",
};

export default function RootLayout({
  children,
}: Readonly<{
  children: React.ReactNode;
}>) {
  return (
    <html lang="en">
      <body
        className={`${inter.variable} antialiased`}
        style={{
          
        }}
      >
        {children}
      </body>
    </html>
  );
}

================================================================================
FILE: app/Form/CreativeForm.tsx
================================================================================

"use client"

import React, { useState } from 'react'
import { Constants } from '@/app/Constants/Constants'
import Image from 'next/image'
import { Card, CardContent, CardDescription, CardFooter, CardHeader, CardTitle } from '@/components/ui/card'
import { Separator } from '@/components/ui/separator'
import { Button } from '@/components/ui/button'
import PersonalDetails from '@/app/Form/Steps/PersonalDetails'
import ContactDetails from '@/app/Form/Steps/ContactDetails'
import CreativeDetails from '@/app/Form/Steps/CreativeDetails'

type FileMeta = { 
  id: string; 
  name: string; 
  url: string; 
  size: number; 
  type: string; 
  source?: 'single'|'zip'; 
  html?: boolean 
};

const CreativeForm = () => {
  const [currentStep, setCurrentStep] = useState(1)
  
  const [files, setFiles] = useState<FileMeta[]>([])
  
  const [formData, setFormData] = useState({
    affiliateId: '',
    companyName: '',
    firstName: '',
    lastName: '',
    
    // Contact Details
    email: '',
    telegramId: '',
    
    // Creative Details
    offerId: '',
    creativeType: '',
    additionalNotes: '',
    fromLines: '',
    subjectLines: '',
    priority: 'medium',
    
    // Files (will be populated by upload handlers)
    uploadedFiles: [] as Array<{
      fileId: string;
      fileName: string;
      fileUrl: string;
      fileSize: number;
      fileType: string;
    }>
  })
  
  const [isSubmitting, setIsSubmitting] = useState(false)

  const handleNext = () => {
    if (currentStep < Constants.totalSteps) {
      setCurrentStep(currentStep + 1)
    }
  }
  
  const handleFormDataChange = (stepData: Partial<typeof formData>) => {
    setFormData(prev => ({ ...prev, ...stepData }))
  }
  
  const handleSubmit = async () => {
    if (currentStep !== Constants.totalSteps) return
    
    setIsSubmitting(true)
    try {
      const response = await fetch('/api/creative/save', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({
          affiliateId: formData.affiliateId,
          companyName: formData.companyName,
          firstName: formData.firstName,
          lastName: formData.lastName,
          email: formData.email,
          telegramId: formData.telegramId,
          offerId: formData.offerId,
          creativeType: formData.creativeType,
          fromLines: formData.fromLines,
          subjectLines: formData.subjectLines,
          notes: formData.additionalNotes,
          priority: formData.priority,
          files: files.map(f => ({
            fileName: f.name,
            fileUrl: f.url,
            fileType: f.type,
            fileSize: f.size
          }))
        })
      })
      
      if (response.ok) {
        const result = await response.json()
        console.log('Creative saved successfully:', result)
      } else {
        throw new Error('Failed to save creative')
      }
    } catch (error) {
      console.error('Submission failed:', error)
    } finally {
      setIsSubmitting(false)
    }
  }

  const handlePrev = () => {
    if (currentStep > 1) {
      setCurrentStep(currentStep - 1)
    }
  }

  const getStepContent = () => {
    switch (currentStep) {
      case 1:
        return (
          <PersonalDetails 
            formData={formData}
            onDataChange={handleFormDataChange}
          />
        )
      case 2:
        return (
          <ContactDetails 
            formData={formData}
            onDataChange={handleFormDataChange}
          />
        )
              case 3:
          return (
            <CreativeDetails 
              formData={formData}
              onDataChange={handleFormDataChange}
              onFilesChange={setFiles}
            />
          )
      default:
        return <div>Step not found</div>
    }
  }

  const getStepLabel = () => {
    return Constants.currentStep.find(step => step.stepNumber === currentStep)?.stepLabel || ''
  }

  const getButtonText = () => {
    if (currentStep === 1) {
      return { prev: 'Back', next: Constants.buttonTexts.nextStep2 }
    } else if (currentStep === 2) {
      return { prev: Constants.buttonTexts.prevStep1, next: Constants.buttonTexts.nextStep3 }
    } else {
      return { prev: Constants.buttonTexts.prevStep2, next: Constants.buttonTexts.submit }
    }
  }

  return (
    <div className="flex flex-col items-center min-h-screen py-8 px-4" 
    style={{
        backgroundImage: `url(${Constants.background})`,
        backgroundColor: "var(--color-primary-50)",
        backgroundRepeat: "no-repeat",
        backgroundPosition: "center",
        backgroundSize: "cover",
    }}
    >
        <div className="flex flex-col items-center justify-center mb-8">
            <Image src={Constants.logo} alt='logo' width={100} height={100} className="w-40 md:w-60 h-10 md:h-20"/>
        </div>

        <Card className="w-full max-w-3xl mx-auto shadow-xl">
            <CardHeader>
                <CardTitle className="text-2xl sm:text-4xl font-bold text-heading">{Constants.formTitle}</CardTitle>
                <CardDescription className="text-base sm:text-lg text-body leading-relaxed py-4">{Constants.formDescription}</CardDescription>
                <div>
                    <p className="text-base sm:text-lg font-semibold text-primary-500">Step {currentStep} of {Constants.totalSteps} : {getStepLabel()}</p>
                </div>
                <Separator className="mt-4" />
            </CardHeader>
            <CardContent>
                {getStepContent()}
            </CardContent>
            <CardFooter>
                            <div className="flex flex-col justify-between gap-4 w-full">
                {currentStep > 1 && (
                    <Button 
                        variant="outline" 
                        className="w-full" 
                        onClick={handlePrev}
                    >
                        {getButtonText().prev}
                    </Button>
                )}
                <Button 
                    className="w-full" 
                    onClick={currentStep === Constants.totalSteps ? handleSubmit : handleNext}
                    disabled={isSubmitting}
                >
                    {isSubmitting ? 'Submitting...' : getButtonText().next}
                </Button>
            </div>
            </CardFooter>
        </Card>
    </div>
  )
}

export default CreativeForm

================================================================================
FILE: app/Form/Steps/PersonalDetails.tsx
================================================================================

"use client"

import React from 'react'
import { Input } from '@/components/ui/input'
import { Label } from '@/components/ui/label'
import { Constants } from '@/app/Constants/Constants'

interface PersonalDetailsProps {
  formData: {
    affiliateId: string;
    companyName: string;
    firstName: string;
    lastName: string;
  };
  onDataChange: (data: Partial<PersonalDetailsProps['formData']>) => void;
}

const PersonalDetails: React.FC<PersonalDetailsProps> = ({ formData, onDataChange }) => {

  // Filter only the personal detail fields from Constants
  const personalFields = Constants.formFields.filter(field => 
    ['affiliateId', 'companyName', 'firstName', 'lastName'].includes(field.name)
  )

  const handleChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    const { name, value } = e.target
    onDataChange({ [name]: value })
  }

  return (
    <div className="space-y-6">
      
      {/* Affiliate ID and Company Name - Single Column */}
      <div className="space-y-4">
        {personalFields.slice(0, 2).map((field) => (
          <div key={field.name} className="space-y-2">
            <Label htmlFor={field.name}>{field.label}</Label>
            <Input
              id={field.name}
              name={field.name}
              type={field.type}
              placeholder={field.placeholder}
              value={formData[field.name as keyof typeof formData]}
              onChange={handleChange}
            />
          </div>
        ))}
      </div>

      {/* First Name and Last Name - Responsive Layout */}
      <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
        {personalFields.slice(2, 4).map((field) => (
          <div key={field.name} className="space-y-2">
            <Label htmlFor={field.name}>{field.label}</Label>
            <Input
              id={field.name}
              name={field.name}
              type={field.type}
              placeholder={field.placeholder}
              value={formData[field.name as keyof typeof formData]}
              onChange={handleChange}
            />
          </div>
        ))}
      </div>
    </div>
  )
}

export default PersonalDetails

================================================================================
FILE: app/Form/Steps/ContactDetails.tsx
================================================================================

import { Constants } from '@/app/Constants/Constants'
import { Button } from '@/components/ui/button'
import { Input } from '@/components/ui/input'
import { Label } from '@/components/ui/label'
import React, { useState } from 'react'

const ContactDetails = () => {
  const [formData, setFormData] = useState({
    email: '',
    telegramId: '',
  })
  
  const [isTelegramFocused, setIsTelegramFocused] = useState(false)
  const [isVerifying, setIsVerifying] = useState(false)
  const [isVerified, setIsVerified] = useState(false)
  const [verificationAttempted, setVerificationAttempted] = useState(false)

const contactFields = Constants.formFields.filter(field =>
  ['email', 'telegramId'].includes(field.name)
)

const handleChange = (e: React.ChangeEvent<HTMLInputElement>) => {
  const { name, value } = e.target
  
  // Special handling for Telegram ID field
  if (name === 'telegramId') {
    let processedValue = value
    
    // If user is typing and value doesn't start with @, add it
    if (value && !value.startsWith('@')) {
      processedValue = '@' + value
    }
    
    // If user deletes everything, don't add @
    if (value === '') {
      processedValue = ''
    }
    
    setFormData(prev => ({
      ...prev,
      [name]: processedValue
    }))
  } else {
    // Normal handling for other fields
    setFormData(prev => ({
      ...prev,
      [name]: value
    }))
  }
}

const handleKeyDown = (e: React.KeyboardEvent<HTMLInputElement>) => {
  const { name, value } = e.currentTarget
  
  // Handle backspace for Telegram field
  if (name === 'telegramId' && e.key === 'Backspace') {
    // If current value is just "@" and user presses backspace, prevent deletion
    if (value === '@') {
      e.preventDefault()
      return
    }
    
    // If user is trying to delete the "@" symbol, prevent it
    if (value.length === 2 && value.startsWith('@')) {
      e.preventDefault()
      setFormData(prev => ({
        ...prev,
        [name]: '@'
      }))
      return
    }
  }
}

const handleFocus = (e: React.FocusEvent<HTMLInputElement>) => {
  const { name } = e.target
  
  // Track focus state for Telegram field
  if (name === 'telegramId') {
    setIsTelegramFocused(true)
    
    // Add @ when focusing on Telegram field if it's empty
    if (!formData.telegramId) {
      setFormData(prev => ({
        ...prev,
        [name]: '@'
      }))
    }
  }
}

const handleBlur = (e: React.FocusEvent<HTMLInputElement>) => {
  const { name, value } = e.target
  
  // Track focus state for Telegram field
  if (name === 'telegramId') {
    setIsTelegramFocused(false)
    
    // Remove @ when losing focus if user hasn't entered anything meaningful
    if (value === '@' || value === '') {
      setFormData(prev => ({
        ...prev,
        [name]: ''
      }))
    }
  }
}

const handleVerify = async () => {
  if (!formData.telegramId || formData.telegramId === '@') return
  
  setIsVerifying(true)
  setVerificationAttempted(true)
  
  try {
    // TODO: BACKEND INTEGRATION - Replace with actual API call
    // const response = await fetch('/api/telegram/verify', {
    //   method: 'POST',
    //   headers: {
    //     'Content-Type': 'application/json',
    //     'Authorization': `Bearer ${userToken}` // Add if authentication required
    //   },
    //   body: JSON.stringify({
    //     telegramId: formData.telegramId,
    //     userId: currentUserId, // Add if user context needed
    //     timestamp: new Date().toISOString()
    //   })
    // })
    
    // TODO: BACKEND INTEGRATION - Handle API response
    // if (!response.ok) {
    //   throw new Error(`HTTP error! status: ${response.status}`)
    // }
    
    // const result = await response.json()
    
    // TODO: BACKEND INTEGRATION - Validate response structure
    // if (result.success && result.data) {
    //   setIsVerified(true)
    //   // Store additional user info if needed
    //   // setUserInfo(result.data.userInfo)
    //   // setVerificationTimestamp(result.data.verifiedAt)
    // } else {
    //   throw new Error(result.message || 'Verification failed')
    // }
    
    // TEMPORARY: Simulate verification for frontend testing
    await new Promise(resolve => setTimeout(resolve, 2000))
    throw new Error('Telegram ID not found or invalid')
    
  } catch (error) {
    console.error('Verification failed:', error)
    setIsVerified(false)
    
    // TODO: BACKEND INTEGRATION - Handle specific error types
    // if (error.message.includes('not found')) {
    //   // Show specific error message for invalid ID
    // } else if (error.message.includes('rate limit')) {
    //   // Show rate limit warning
    // } else {
    //   // Show generic error message
    // }
    
  } finally {
    setIsVerifying(false)
  }
}

  return (
    <div className="space-y-6">
      <div className="space-y-4">
        {contactFields.map((field) => (
          <div key={field.name} className="space-y-2">
            <Label htmlFor={field.name}>{field.label}</Label>
            
            {/* Custom input container for Telegram field with verify button */}
            {field.name === 'telegramId' ? (
              <div className="relative">
                <Input 
                  id={field.name}
                  name={field.name}
                  type={field.type}
                  placeholder={field.placeholder}
                  value={formData[field.name as keyof typeof formData]}
                  onChange={handleChange}
                  onFocus={handleFocus}
                  onBlur={handleBlur}
                  onKeyDown={handleKeyDown}
                  className="pr-20" // Add right padding for the button
                />
                <Button
                  variant="outline"
                  size="sm"
                  type="button"
                  onClick={handleVerify}
                  disabled={isVerifying || isVerified || !formData.telegramId || formData.telegramId === '@'}
                  className="absolute right-2 top-1/2 transform -translate-y-1/2 h-8 px-3 text-xs"
                >
                  {isVerifying ? (
                    <div className="flex items-center gap-2">
                      <div className="w-3 h-3 border-2 border-primary-500 border-t-transparent rounded-full animate-spin"></div>
                      <span>Verifying...</span>
                    </div>
                  ) : isVerified ? (
                    <div className="flex items-center gap-2 text-success-dark">
                      <span>✅</span>
                      <span>Verified</span>
                    </div>
                  ) : (
                    'Verify'
                  )}
                </Button>
              </div>
            ) : (
              <Input 
                id={field.name}
                name={field.name}
                type={field.type}
                placeholder={field.placeholder}
                value={formData[field.name as keyof typeof formData]}
                onChange={handleChange}
                onFocus={handleFocus}
                onBlur={handleBlur}
                onKeyDown={handleKeyDown}
              />
            )}
            
            {/* Show tip for Telegram field only when focused */}
            {field.name === 'telegramId' && isTelegramFocused && (
              <p className="text-xs text-gray-500 mt-1">
                💡 Enter your Telegram ID exactly as it appears - it&apos;s case sensitive
              </p>
            )}
            
            {/* Show verification steps box for Telegram field when verification was attempted and failed */}
            {field.name === 'telegramId' && verificationAttempted && !isVerifying && !isVerified && (
              <div className="mt-3 p-3 bg-warning-light border border-warning-medium rounded-md">
                <h4 className="text-sm font-medium text-warning-medium mb-2">📋 Steps to Verify Your Telegram ID:</h4>
                <ol className="text-xs text-warning-medium space-y-1 list-decimal list-inside mb-3">
                  <li>Click on Start Bot Button</li>
                  <li>Send /start to the bot</li>
                  <li>Come back and Verify again</li>
                </ol>
                <Button
                  variant="outline"
                  size="xs"
                  type="button"
                  // TODO: BACKEND INTEGRATION - Replace with actual bot link
                  // onClick={() => window.open(Constants.telegramBotUrl, '_blank')}
                  className="text-xs w-max border-warning-medium text-warning-medium hover:bg-warning-medium hover:text-white"
                >
                  Start Bot
                </Button>
              </div>
            )}
          </div>
        ))}
      </div>  
    </div>
  )
}

export default ContactDetails

================================================================================
FILE: app/Form/Steps/CreativeDetails.tsx
================================================================================

"use client"

import { Constants } from '@/app/Constants/Constants'
import { Label } from '@/components/ui/label'
import { Textarea } from '@/components/ui/textarea'
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select'
import { Button } from '@/components/ui/button'
import { Input } from '@/components/ui/input'
import { File, FileArchive, PencilLine, Search } from 'lucide-react'
import React, { useEffect, useState } from 'react'
import { FileUploadModal, UploadType, FromSubjectLinesModal } from '@/components/modals'

type UploadedFileMeta = {
  id: string;           
  name: string;
  url: string;          
  size: number;
  type: string;
  source?: 'single' | 'zip';
  html?: boolean;       
  previewUrl?: string;  
};

type UploadError = { scope: 'single' | 'zip'; message: string };

interface CreativeDetailsProps {
  formData: {
    offerId: string;
    creativeType: string;
    additionalNotes: string;
    fromLines: string;
    subjectLines: string;
    priority: string;
  };
  onDataChange: (data: Partial<CreativeDetailsProps['formData']>) => void;
  onFilesChange?: (files: UploadedFileMeta[]) => void;
}

const CreativeDetails: React.FC<CreativeDetailsProps> = ({ formData, onDataChange, onFilesChange }) => {
  
  const [offerSearchTerm, setOfferSearchTerm] = useState('')
  const [offerOptions, setOfferOptions] = useState<Array<{label: string; value: string}>>([])
  const [isLoadingOffers, setIsLoadingOffers] = useState(true)
  
  useEffect(() => {
    let isMounted = true;
    (async () => {
      try {
        const res = await fetch('/api/everflow/offers', { cache: 'no-store' });
        if (!res.ok) throw new Error(await res.text());
        const offerIds = await res.json();
        if (!isMounted) return;
        const offers = offerIds.map((id: string) => ({ 
          label: `Offer ID: ${id}`, 
          value: id 
        }));
        setOfferOptions(offers);
        setIsLoadingOffers(false);
      } catch (e) {
        console.error('Failed to fetch offers:', e);
        if (!isMounted) return;
        setOfferOptions([]);
        setIsLoadingOffers(false);
      }
    })();
    return () => { isMounted = false; };
  }, []);
  
  const [isUploadModalOpen, setIsUploadModalOpen] = useState(false)
  const [currentUploadType, setCurrentUploadType] = useState<UploadType>('single')
  const [isFromSubjectLinesModalOpen, setIsFromSubjectLinesModalOpen] = useState(false)
  
  const [hasFromSubjectLines, setHasFromSubjectLines] = useState(false)
  
  // File management state
  const [uploadedFiles, setUploadedFiles] = useState<UploadedFileMeta[]>([])
  const [uploading, setUploading] = useState(false)
  const [progress, setProgress] = useState<number | null>(null)
  const [lastError, setLastError] = useState<UploadError | null>(null)
  
  React.useEffect(() => {
    onFilesChange?.(uploadedFiles);
  }, [uploadedFiles, onFilesChange]);

  const handleSelectChange = (fieldName: string, value: string) => {
    onDataChange({ [fieldName]: value })
    
    // Clear search term when offer is selected
    if (fieldName === 'offerId') {
      setOfferSearchTerm('')
    }
  }

  const handleInputChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    const { name, value } = e.target
    onDataChange({ [name]: value })
  }
  
  // File management helpers
  const addFiles = (files: UploadedFileMeta[]) =>
    setUploadedFiles(prev => [...prev, ...files])

  const removeFile = (id: string) =>
    setUploadedFiles(prev => prev.filter(f => f.id !== id))

  const makeThumb = (file: File) =>
    new Promise<string | undefined>((resolve) => {
      if (!file.type.startsWith('image/')) return resolve(undefined)
      const reader = new FileReader()
      reader.onload = () => resolve(typeof reader.result === 'string' ? reader.result : undefined)
      reader.readAsDataURL(file)
    })

  const resetFeedback = () => { setLastError(null); setProgress(null) }

  const handleTextareaChange = (e: React.ChangeEvent<HTMLTextAreaElement>) => {
    const { name, value } = e.target
    onDataChange({ [name]: value })
  }
  
    // File upload handlers
  const handleSingleFileUpload = async (file: File) => {
    resetFeedback();
    try {
      setUploading(true);
      setProgress(5);

      // send to your existing single upload endpoint
      const fd = new FormData();
      fd.append('file', file);
      const r = await fetch('/api/upload-url', { method: 'POST', body: fd });
      if (!r.ok) throw new Error(await r.text());
      const { url } = await r.json();

      const previewUrl = await makeThumb(file);

      addFiles([{
        id: crypto.randomUUID(),
        name: file.name,
        url,
        size: file.size,
        type: file.type || 'application/octet-stream',
        source: 'single',
        html: /\.html?$/i.test(file.name),
        previewUrl
      }]);

      setProgress(100);
    } catch (e: unknown) {
      setLastError({ scope: 'single', message: e instanceof Error ? e.message : 'Upload failed' });
    } finally {
      setUploading(false);
      setTimeout(() => setProgress(null), 600);
    }
  }
  
  const handleMultipleFileUpload = async (file: File) => {
    resetFeedback();
    try {
      setUploading(true);
      setProgress(5);

      const fd = new FormData();
      fd.append('file', file);
      const r = await fetch('/api/upload-zip', { method: 'POST', body: fd });
      if (!r.ok) throw new Error(await r.text());
      const data = await r.json();

      const mapped: UploadedFileMeta[] = (data.extractedFiles || []).map((f: { fileId: string; fileName: string; fileUrl: string; fileSize: number; fileType?: string }) => ({
        id: f.fileId,
        name: f.fileName,
        url: f.fileUrl,
        size: f.fileSize,
        type: f.fileType || 'application/octet-stream',
        source: 'zip',
        html: /\.html?$/i.test(f.fileName),
        previewUrl: /\.(png|jpe?g|gif|webp)$/i.test(f.fileName) ? f.fileUrl : undefined,
      }));

      addFiles(mapped);
      setProgress(100);
    } catch (e: unknown) {
      setLastError({ scope: 'zip', message: e instanceof Error ? e.message : 'ZIP extraction failed' });
    } finally {
      setUploading(false);
      setTimeout(() => setProgress(null), 600);
    }
  }
  
     const handleFromSubjectLinesSave = (fromLines: string, subjectLines: string) => {
     console.log('From Lines:', fromLines)
     console.log('Subject Lines:', subjectLines)
     
     // Store from and subject lines in form data
     onDataChange({ fromLines, subjectLines })
     
     // Set flag to show uploaded lines instead of upload buttons
     setHasFromSubjectLines(true)
   }
  
  // Handle viewing from/subject lines
  const handleViewFromSubjectLines = () => {
    setIsFromSubjectLinesModalOpen(true)
  }
  
  // Handle deleting from/subject lines
  const handleDeleteFromSubjectLines = () => {
    onDataChange({ fromLines: '', subjectLines: '' })
    setHasFromSubjectLines(false)
  }
  
  // Handle priority change
  const handlePriorityChange = (priority: string) => {
    onDataChange({ priority })
  }
  
  // Separate fields by type for proper ordering
  const selectFields = Constants.formFields.filter(field => 
    ['offerId', 'creativeType'].includes(field.name)
  )
  
  const textareaFields = Constants.formFields.filter(field => 
    ['additionalNotes'].includes(field.name)
  )

  const renderField = (field: {
    name: string;
    type: string;
    placeholder: string;
    options?: Array<{ label: string; value: string }>;
  }) => {
    if (field.type === 'select') {
      // Special handling for offer dropdown with search
      if (field.name === 'offerId') {
        const filteredOptions = offerOptions.filter(option =>
          option.label.toLowerCase().includes(offerSearchTerm.toLowerCase())
        )
        
        return (
          <Select 
            value={formData[field.name as keyof typeof formData]} 
            onValueChange={(value) => handleSelectChange(field.name, value)}
            onOpenChange={(open) => {
              if (open) {
                setOfferSearchTerm('')
              }
            }}
          >
            <SelectTrigger className="w-full h-12">
              <SelectValue placeholder={field.placeholder} />
            </SelectTrigger>
            <SelectContent>
              {/* Search Input */}
              <div className="p-3 border-b border-color-border">
                <div className="relative">
                  <Search className="absolute left-3 top-1/2 transform -translate-y-1/2 text-color-muted-foreground w-4 h-4" />
                  <Input
                    placeholder="Search offers..."
                    value={offerSearchTerm}
                    onChange={(e) => setOfferSearchTerm(e.target.value)}
                    className="pl-10 h-9 text-sm border-0 focus-visible:ring-0 focus-visible:border-0 shadow-none"
                  />
                </div>
              </div>
              
              {/* Filtered Options */}
              {filteredOptions.length > 0 ? (
                filteredOptions.map((option) => (
                  <SelectItem key={option.value} value={option.value}>
                    {option.label}
                  </SelectItem>
                ))
              ) : (
                <div className="px-3 py-2 text-sm text-color-muted-foreground text-center">
                  {offerSearchTerm ? 'No offers found' : (isLoadingOffers ? 'Loading offers...' : 'No offers available')}
                </div>
              )}
            </SelectContent>
          </Select>
        )
      }
      
      // Regular select for other fields
      return (
        <Select value={formData[field.name as keyof typeof formData]} onValueChange={(value) => handleSelectChange(field.name, value)}>
          <SelectTrigger className="w-full h-12">
            <SelectValue placeholder={field.placeholder} />
          </SelectTrigger>
          <SelectContent>
            {field.options?.map((option) => (
              <SelectItem key={option.value} value={option.value}>
                {option.label}
              </SelectItem>
            ))}
          </SelectContent>
        </Select>
      )
    } else if (field.type === 'button') {
      return (
        <Button variant="outline" className="w-full h-10 px-3 py-2 border border-color-border rounded-md focus:outline-none focus:ring-2 focus:ring-color-ring focus:border-transparent">
          {field.placeholder}
        </Button>
      )
    }
    
    else if (field.type === 'textarea') {
      return (
        <Textarea
          id={field.name}
          name={field.name}
          value={formData[field.name as keyof typeof formData]}
          onChange={handleTextareaChange}
          placeholder={field.placeholder}
          rows={4}
          className="w-full h-24 px-3 py-2 border border-color-border rounded-md focus:outline-none focus:ring-2 focus:ring-color-ring focus:border-transparent resize-none bg-white"
        />
      )
    } else {
      return (
        <input
          type={field.type}
          id={field.name}
          name={field.name}
          value={formData[field.name as keyof typeof formData]}
          onChange={handleInputChange}
          placeholder={field.placeholder}
          className="w-full h-10 px-3 py-2 border border-color-border rounded-md focus:outline-none focus:ring-2 focus:ring-color-ring focus:border-transparent"
        />
      )
    }
  }

  return (
    <div className="space-y-6">
      {/* Select Fields (Offer ID & Creative Type) */}
      <div className="space-y-4">
        {selectFields.map((field) => (
          <div key={field.name} className="space-y-2">
            <Label htmlFor={field.name}>{field.label}</Label>
            {renderField(field)}
          </div>
        ))}
      </div>
      
      {/* Upload Creative Buttons or Uploaded From/Subject Lines */}
      <div className="space-y-4">
        <Label className="text-base font-medium">
          {hasFromSubjectLines ? 'Uploaded From & Subject Lines' : 'Upload Creatives'}
        </Label>
        
        {hasFromSubjectLines ? (
          // Show uploaded from/subject lines with view/delete buttons
          <div className="p-4 border border-green-200 bg-green-50 rounded-lg">
            <div className="flex items-center justify-between">
              <div className="flex items-center gap-3">
                <PencilLine className="h-5 w-5 text-green-600" />
                <div>
                  <p className="font-medium text-green-800">From & Subject Lines Uploaded</p>
                  <p className="text-sm text-green-600">
                    {formData.fromLines.split('\n').length} from lines • {formData.subjectLines.split('\n').length} subject lines
                  </p>
                </div>
              </div>
              <div className="flex gap-2">
                <Button
                  variant="outline"
                  size="sm"
                  onClick={handleViewFromSubjectLines}
                  className="text-green-700 border-green-300 hover:bg-green-100"
                >
                  View
                </Button>
                <Button
                  variant="outline"
                  size="sm"
                  onClick={handleDeleteFromSubjectLines}
                  className="text-red-700 border-red-300 hover:bg-red-100"
                >
                  Delete
                </Button>
              </div>
            </div>
          </div>
        ) : (
          // Show upload buttons
          <div className={`grid gap-4 ${formData.creativeType === 'email' ? 'grid-cols-1 md:grid-cols-3' : 'grid-cols-1 md:grid-cols-2'}`}>
            {/* Single Creative - Always visible */}
            <Button
              variant="outline"
              className="h-20 flex flex-col items-center justify-center gap-2 p-4 border-2 border-dashed border-color-border hover:border-blue-400 hover:bg-blue-50 transition-all duration-200"
              onClick={() => {
                setCurrentUploadType('single')
                setIsUploadModalOpen(true)
              }}
            >
              <File className="text-blue-400" style={{ width: '20px', height: '20px' }} />
              <span className="text-sm font-medium text-center">Single Creative</span>
            </Button>

            {/* Multiple Creatives - Always visible */}
            <Button
              variant="outline"
              className="h-20 flex flex-col items-center justify-center gap-2 p-4 border-2 border-dashed border-color-border hover:border-blue-400 hover:bg-blue-400 hover:bg-blue-50 transition-all duration-200"
              onClick={() => {
                setCurrentUploadType('multiple')
                setIsUploadModalOpen(true)
              }}
            >
              <FileArchive className="text-blue-400" style={{ width: '20px', height: '20px' }} />
              <span className="text-sm font-medium text-center">Multiple Creatives</span>
            </Button>

            {/* From & Subject Lines - Only visible when Email is selected */}
            {formData.creativeType === 'email' && (
              <Button
                variant="outline"
                className="h-20 flex flex-col items-center justify-center gap-2 p-4 border-2 border-dashed border-color-border hover:border-blue-400 hover:bg-blue-50 transition-all duration-200"
                onClick={() => setIsFromSubjectLinesModalOpen(true)}
              >
                <PencilLine className="text-blue-400" style={{ width: '20px', height: '20px' }} />
                <div className="text-sm font-medium text-center">From & Subject Lines</div>
              </Button>
            )}
                     </div>
         )}
       </div>
       
       {/* Upload feedback */}
       {(uploading || progress !== null || lastError) && (
         <div className="mt-3 space-y-2">
           {uploading && <p className="text-sm text-gray-600">Uploading…</p>}
           {progress !== null && (
             <div className="w-full bg-gray-200 rounded h-2 overflow-hidden">
               <div className="bg-blue-500 h-2 transition-all" style={{ width: `${progress}%` }} />
             </div>
           )}
           {lastError && (
             <div className="p-3 bg-red-50 border border-red-200 rounded text-sm text-red-700">
               {lastError.message}
             </div>
           )}
         </div>
       )}

       {/* Uploaded files preview/list */}
       {uploadedFiles.length > 0 && (
         <div className="mt-4">
           <div className="flex items-center justify-between mb-2">
             <h4 className="text-sm font-semibold text-gray-800">
               Uploaded Files ({uploadedFiles.length})
             </h4>
           </div>

           <div className="grid gap-3 sm:grid-cols-2">
             {uploadedFiles.map(f => (
               <div key={f.id} className="flex items-center gap-3 p-3 rounded border bg-white">
                 {/* thumbnail */}
                 <div className="w-14 h-14 flex items-center justify-center bg-gray-100 rounded overflow-hidden">
                   {f.previewUrl ? (
                     <img src={f.previewUrl} alt={f.name} className="object-cover w-full h-full" />
                   ) : f.html ? (
                     <span className="text-xs text-gray-600">HTML</span>
                   ) : (
                     <span className="text-xs text-gray-600">FILE</span>
                   )}
                 </div>

                 {/* meta */}
                 <div className="min-w-0 flex-1">
                   <p className="text-sm font-medium truncate">{f.name}</p>
                   <p className="text-xs text-gray-500 truncate">{f.type} · {(f.size/1024).toFixed(1)} KB</p>
                   <a href={f.url} target="_blank" className="text-xs text-blue-600 underline">Open</a>
                 </div>

                 {/* remove */}
                 <button
                   className="text-xs px-2 py-1 border rounded hover:bg-gray-50"
                   onClick={() => removeFile(f.id)}
                 >
                   Remove
                 </button>
               </div>
             ))}
           </div>
         </div>
       )}
       
       {/* Priority Toggle */}
      <div className="space-y-3">
        <Label className="text-base font-medium text-gray-700">Set Priority</Label>
        <div className="flex bg-white border border-gray-300 rounded-lg p-1 w-fit shadow-sm">
          {Constants.priorityLevels.map((priority) => (
            <button
              key={priority.value}
              onClick={() => handlePriorityChange(priority.value)}
              className={`px-6 py-2.5 rounded-md text-sm font-semibold transition-all duration-200 ${
                formData.priority === priority.value
                  ? 'bg-blue-400 text-white shadow-sm border border-blue-400'
                  <div className="text-sm font-medium text-center">From & Subject Lines</div>
              </Button>
            )}
                     </div>
         )}
       </div>
       
       {/* Upload feedback */}
       {(uploading || progress !== null || lastError) && (
         <div className="mt-3 space-y-2">
           {uploading && <p className="text-sm text-gray-600">Uploading…</p>}
           {progress !== null && (
             <div className="w-full bg-gray-200 rounded h-2 overflow-hidden">
               <div className="bg-blue-500 h-2 transition-all" style={{ width: `${progress}%` }} />
             </div>
           )}
           {lastError && (
             <div className="text-sm font-medium text-center">From & Subject Lines</div>
              </Button>
            )}
                     </div>
         )}
       </div>
       
       {/* Upload feedback */}
       {(uploading || progress !== null || lastError) && (
         <div className="mt-3 space-y-2">
           {uploading && <p className="text-sm text-gray-600">Uploading…</p>}
           {progress !== null && (
             <div className="w-full bg-gray-200 rounded h-2 overflow-hidden">
               <div className="bg-blue-500 h-2 transition-all" style={{ width: `${progress}%` }} />
             </div>
           )}
           {lastError && (
             <div className="p-3 bg-red-50 border border-red-200 rounded text-sm text-red-700">
               {lastError.message}
             </div>
           )}
         </div>
       )}

       {/* Uploaded files preview/list */}
       {uploadedFiles.length > 0 && (
         <div className="mt-4">
           <div className="flex items-center justify-between mb-2">
             <div className="text-sm font-medium text-center">From & Subject Lines</div>
              </Button>
            )}
                     </div>
         )}
       </div>
       
       {/* Upload feedback */}
       {(uploading || progress !== null || lastError) && (
         <div className="mt-3 space-y-2">
           {uploading && <p className="text-sm text-gray-600">Uploading…</p>}
           {progress !== null && (
             <div className="w-full bg-gray-200 rounded h-2 overflow-hidden">
             <div className="text-sm font-medium text-center">From & Subject Lines</div>
              </Button>
            )}
                     </div>
         )}
       </div>
       
       {/* Upload feedback */}
       {(uploading || progress !== null || lastError) && (
         <div className="mt-3 space-y-2">
           {uploading && <p className="text-sm text-gray-600">Uploading…</div>
              </Button>
            )}
                     </div>
         )}
       </div>
       
       {/* Upload feedback */}
       {(uploading || progress !== null || lastError) && (
         <div className="mt-3 space-y-2">
           {uploading && <p className="text-sm text-gray-600">Uploading…</p>}
           {progress !== null && (
             <div className="w-full bg-gray-200 rounded h-2 overflow-hidden">
               <div className="bg-blue-500 h-2 transition-all" style={{ width: `${progress}%` }} />
             </div>
           )}
           {lastError && (
             <div className="p-3 bg-red-50 border border-red-200 rounded text-sm text-red-700">
               {lastError.message}
             </div>
           )}
         </div>
       )}

       {/* Uploaded files preview/list */}
       {uploadedFiles.length > 0 && (
         <div className="mt-4">
           <div className="flex items-center justify-between mb-2">
             <h4 className="text-sm font-semibold text-gray-800">
               Uploaded Files ({uploadedFiles.length})
             </h4>
           </div>

           <div className="grid gap-3 sm:grid-cols-2">
             {uploadedFiles.map(f => (
               <div key={f.id} className="flex items-center gap-3 p-3 rounded border bg-white">
                 {/* thumbnail */}
                 <div className="w-14 h-14 flex items-center justify-center bg-gray-100 rounded overflow-hidden">
                   {f.previewUrl ? (
                     <img src={f.previewUrl} alt={f.name} className="object-cover w-full h-full" />
                   ) : f.html ? (
                     <span className="text-xs text-gray-600">HTML</span>
                   ) : (
                     <span className="text-xs text-gray-600">FILE</span>
                   )}
                 </div>

                 {/* meta */}
                 <div className="min-w-0 flex-1">
                   <p className="text-sm font-medium truncate">{f.name}</p>
                   <p className="text-xs text-gray-500 truncate">{f.type} · {(f.size/1024).toFixed(1)} KB</p>
                   <a href={f.url} target="_blank" className="text-xs text-blue-600 underline">Open</a>
                 </div>

                 {/* remove */}
                 <button
                   className="text-xs px-2 py-1 border rounded hover:bg-gray-50"
                   onClick={() => removeFile(f.id)}
                 >
                   Remove
                 </button>
               </div>
             ))}
           </div>
         </div>
       )}
       
       {/* Priority Toggle */}
      <div className="space-y-3">
        <Label className="text-base font-medium text-gray-700">Set Priority</Label>
        <div className="flex bg-white border border-gray-300 rounded-lg p-1 w-fit shadow-sm">
          {Constants.priorityLevels.map((priority) => (
            <button
              key={priority.value}
              onClick={() => handlePriorityChange(priority.value)}
              className={`px-6 py-2.5 rounded-md text-sm font-semibold transition-all duration-200 ${
                formData.priority === priority.value
                  ? 'bg-blue-400 text-white shadow-sm border border-blue-400'
                  : 'text-gray-600 hover:text-gray-800 hover:bg-gray-50'
              }`}
            >
              {priority.name}
            </button>
          ))}
        </div>
      </div>
      
      {/* Textarea Fields (Additional Notes) */}
      <div className="space-y-4">
        {textareaFields.map((field) => (
          <div key={field.name} className="space-y-2">
            <Label htmlFor={field.name}>{field.label}</Label>
            {renderField(field)}
          </div>
        ))}
      </div>
      
      {/* Unified File Upload Modal */}
      <FileUploadModal
        isOpen={isUploadModalOpen}
        onClose={() => setIsUploadModalOpen(false)}
        uploadType={currentUploadType}
        onFileUpload={currentUploadType === 'single' ? handleSingleFileUpload : handleMultipleFileUpload}
      />
      
      {/* From & Subject Lines Modal */}
      <FromSubjectLinesModal
        isOpen={isFromSubjectLinesModalOpen}
        onClose={() => setIsFromSubjectLinesModalOpen(false)}
        onSave={handleFromSubjectLinesSave}
        initialFromLines={formData.fromLines}
        initialSubjectLines={formData.subjectLines}
      />
    </div>
  )
}

export default CreativeDetails

================================================================================
FILE: components/modals/FileUploadModal.tsx
================================================================================

"use client"

import React, { useCallback } from 'react'
import { Button } from '@/components/ui/button'
import { X, Upload, CheckCircle, AlertCircle, FolderOpen } from 'lucide-react'
import { useFileUpload } from '@/hooks'
import { FILE_UPLOAD_CONFIG, UPLOAD_STATUS_MESSAGES, formatFileSize } from '@/constants'

export type UploadType = 'single' | 'multiple'

interface FileUploadModalProps {
  isOpen: boolean
  onClose: () => void
  uploadType: UploadType
  onFileUpload: (file: File) => void
  // TODO: BACKEND INTEGRATION - Add additional props for backend communication
  // 
  // BACKEND DEVELOPER NOTES:
  // 1. Consider adding: onUploadProgress, onUploadError, uploadEndpoint
  // 2. Add file validation callbacks for server-side validation
  // 3. Include authentication headers and user context
  // 4. Add retry mechanism for failed uploads
  // 5. Consider adding chunked upload support for large files
  // 6. Add file preview generation callbacks
  // 7. Include file metadata collection (tags, categories, etc.)
  // 8. Add support for different storage providers
  // 9. Include file compression options
  // 10. Add virus scanning integration points
}

const FileUploadModal: React.FC<FileUploadModalProps> = ({
  isOpen,
  onClose,
  uploadType,
  onFileUpload
}) => {
  const config = uploadType === 'single' 
    ? FILE_UPLOAD_CONFIG.SINGLE_CREATIVE 
    : FILE_UPLOAD_CONFIG.MULTIPLE_CREATIVES

  const { state, handlers, startUpload } = useFileUpload(
    config.ALLOWED_TYPES,
    config.MAX_SIZE_MB,
    onFileUpload
  )

  const handleClose = () => {
    handlers.resetState()
    onClose()
  }

  const getModalTitle = () => {
    return uploadType === 'single' ? 'Upload Single Creative' : 'Upload Multiple Creatives'
  }

  const getDragDropContent = () => {
    if (state.selectedFile) {
      return (
        <div className="space-y-3">
          <CheckCircle className="h-12 w-12 text-green-500 mx-auto" />
          <div>
            <p className="text-sm font-medium text-gray-900">{state.selectedFile.name}</p>
            <p className="text-xs text-gray-500">
              {formatFileSize(state.selectedFile.size)}
            </p>
            {uploadType === 'multiple' && (
              <p className="text-xs text-green-600 font-medium">ZIP file ready for upload</p>
            )}
          </div>
        </div>
      )
    }
    
          return (
        <div className="space-y-3">
          <Upload className={`h-12 w-12 text-gray-400 mx-auto`} />
          <div>
            <p className="text-sm font-medium text-gray-900">
              {config.PLACEHOLDER}
            </p>
            <p className="text-xs text-gray-500">
              or click to browse
            </p>
          </div>
        </div>
      )
  }

  const getInfoBox = () => {
    if (uploadType === 'multiple') {
      return (
        <div className="mb-4 p-3 bg-blue-50 border border-blue-200 rounded-md">
          <div className="flex items-start gap-2">
            <FolderOpen className="h-4 w-4 text-blue-500 mt-0.5" />
            <div className="text-sm text-blue-700">
              <p className="font-medium">ZIP File Requirements:</p>
              <ul className="mt-1 space-y-1 text-xs">
                {config.REQUIREMENTS?.map((req: string, index: number) => (
                  <li key={index}>• {req}</li>
                ))}
              </ul>
            </div>
          </div>
        </div>
      )
    }
    return null
  }

  const getFileInfo = () => {
    if (!state.selectedFile) return null
    
    return (
      <div className="mt-4 p-3 bg-blue-50 border border-blue-200 rounded-md">
        <div className="flex items-center gap-2">
          <Upload className="h-4 w-4 text-gray-400" />
          <div className="flex-1 min-w-0">
            <p className="text-sm font-medium text-blue-900 truncate">
              {state.selectedFile.name}
            </p>
            <p className="text-xs text-blue-700">
              {formatFileSize(state.selectedFile.size)}
            </p>
          </div>
        </div>
      </div>
    )
  }

  if (!isOpen) return null

  return (
    <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50 p-4">
      <div className="bg-white rounded-lg shadow-xl w-full max-w-md">
        {/* Header */}
        <div className="flex items-center justify-between p-6 border-b border-color-border">
          <h2 className="text-xl font-semibold text-gray-900">{getModalTitle()}</h2>
          <Button
            variant="ghost"
            size="sm"
            onClick={handleClose}
            className="h-8 w-8 p-0 hover:bg-red-500"
          >
            <X className="h-4 w-4" />
          </Button>
        </div>

        {/* Content */}
        <div className="p-6">
          {/* Info Box - Only for multiple files */}
          {getInfoBox()}

          {/* Drag & Drop Area */}
          <div
            className={`border-2 border-dashed rounded-lg p-8 text-center transition-colors ${
              state.dragActive 
                ? 'border-blue-400 bg-blue-50' 
                : state.selectedFile 
                  ? 'border-green-400 bg-green-50' 
                  : 'border-gray-300 bg-gray-50'
            }`}
            onDragEnter={handlers.handleDrag}
            onDragLeave={handlers.handleDrag}
            onDragOver={handlers.handleDrag}
            onDrop={handlers.handleDrop}
          >
            {getDragDropContent()}
          </div>

          {/* File Input */}
          <input
            type="file"
            id="file-upload"
            className="hidden"
            onChange={handlers.handleFileInput}
            accept={config.ACCEPT_EXTENSIONS}
          />

          {/* Browse Button */}
          <div className="mt-4 text-center">
            <Button
              variant="outline"
              onClick={() => document.getElementById('file-upload')?.click()}
              className="w-full"
            >
              Browse {uploadType === 'single' ? 'Files' : 'ZIP Files'}
            </Button>
          </div>

          {/* Error Message */}
          {state.errorMessage && (
            <div className="mt-4 p-3 bg-red-50 border border-red-200 rounded-md flex items-center gap-2">
              <AlertCircle className="h-4 w-4 text-red-500" />
              <p className="text-sm text-red-700">{state.errorMessage}</p>
            </div>
          )}

          {/* File Info */}
          {getFileInfo()}
        </div>
      </div>
    </div>
  )
}

export default FileUploadModal

================================================================================
FILE: components/modals/FromSubjectLinesModal.tsx
================================================================================

"use client"

import React, { useState, useEffect } from 'react'
import { Button } from '@/components/ui/button'
import { Textarea } from '@/components/ui/textarea'
import { Label } from '@/components/ui/label'
import { X, PencilLine, Info } from 'lucide-react'
import { Constants } from '@/app/Constants/Constants'

interface FromSubjectLinesModalProps {
  isOpen: boolean
  onClose: () => void
  onSave: (fromLines: string, subjectLines: string) => void
  initialFromLines?: string
  initialSubjectLines?: string
}

const FromSubjectLinesModal: React.FC<FromSubjectLinesModalProps> = ({
  isOpen,
  onClose,
  onSave,
  initialFromLines = '',
  initialSubjectLines = ''
}) => {
  const [fromLines, setFromLines] = useState(initialFromLines)
  const [subjectLines, setSubjectLines] = useState(initialSubjectLines)
  const [errors, setErrors] = useState<{ fromLines?: string; subjectLines?: string }>({})

  // Update state when modal opens with initial values
  useEffect(() => {
    if (isOpen) {
      setFromLines(initialFromLines)
      setSubjectLines(initialSubjectLines)
      setErrors({})
    }
  }, [isOpen, initialFromLines, initialSubjectLines])

  const handleSave = () => {
    // Reset errors
    setErrors({})
    
    // Validate inputs
    const newErrors: { fromLines?: string; subjectLines?: string } = {}
    
    if (!fromLines.trim()) {
      newErrors.fromLines = 'From lines are required'
    }
    
    if (!subjectLines.trim()) {
      newErrors.subjectLines = 'Subject lines are required'
    }
    
    if (Object.keys(newErrors).length > 0) {
      setErrors(newErrors)
      return
    }
    
    // Save and close
    onSave(fromLines.trim(), subjectLines.trim())
    handleClose()
  }

  const handleClose = () => {
    setFromLines('')
    setSubjectLines('')
    setErrors({})
    onClose()
  }

  if (!isOpen) return null

  return (
    <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50 p-4">
      <div className="bg-white rounded-lg shadow-xl w-full max-w-2xl">
        {/* Header */}
        <div className="flex items-center justify-between p-6 border-b border-color-border">
          <div className="flex items-center gap-3">
            <PencilLine className="h-6 w-6 text-blue-500" />
            <h2 className="text-xl font-semibold text-gray-900">{Constants.fromSubjectLinesConfig.title}</h2>
          </div>
          <Button
            variant="ghost"
            size="sm"
            onClick={handleClose}
            className="h-8 w-8 p-0 hover:bg-red-500 hover:text-white transition-colors"
          >
            <X className="h-4 w-4" />
          </Button>
        </div>

        {/* Content */}
        <div className="p-6 space-y-6">
          {/* Info Box */}
          <div className="p-4 bg-blue-50 border border-blue-200 rounded-md">
            <div className="flex items-start gap-2">
              <Info className="h-4 w-4 text-blue-500 mt-0.5" />
              <div className="text-sm text-blue-700">
                <p className="font-medium">{Constants.fromSubjectLinesConfig.guidelines.title}</p>
                <ul className="mt-2 space-y-1 text-xs">
                  {Constants.fromSubjectLinesConfig.guidelines.items.map((item, index) => (
                    <li key={index}>• {item}</li>
                  ))}
                </ul>
              </div>
            </div>
          </div>

          {/* From Lines */}
          <div className="space-y-3">
            <Label htmlFor="fromLines" className="text-base font-medium">
              {Constants.fromSubjectLinesConfig.fromLines.label}
            </Label>
            <Textarea
              id="fromLines"
              placeholder={Constants.fromSubjectLinesConfig.fromLines.placeholder}
              value={fromLines}
              onChange={(e) => setFromLines(e.target.value)}
              rows={4}
              className={`w-full resize-none ${errors.fromLines ? 'border-red-500 focus-visible:border-red-500 focus-visible:ring-red-500/50' : ''}`}
            />
            {errors.fromLines && (
              <p className="text-sm text-red-600">{errors.fromLines}</p>
            )}
            <p className="text-xs text-gray-500">
              {Constants.fromSubjectLinesConfig.fromLines.helpText}
            </p>
          </div>

          {/* Subject Lines */}
          <div className="space-y-3">
            <Label htmlFor="subjectLines" className="text-base font-medium">
              {Constants.fromSubjectLinesConfig.subjectLines.label}
            </Label>
            <Textarea
              id="subjectLines"
              placeholder={Constants.fromSubjectLinesConfig.subjectLines.placeholder}
              value={subjectLines}
              onChange={(e) => setSubjectLines(e.target.value)}
              rows={4}
              className={`w-full resize-none ${errors.subjectLines ? 'border-red-500 focus-visible:border-red-500 focus-visible:ring-red-500/50' : ''}`}
            />
            {errors.subjectLines && (
              <p className="text-sm text-red-600">{errors.subjectLines}</p>
            )}
            <p className="text-xs text-gray-500">
              {Constants.fromSubjectLinesConfig.subjectLines.helpText}
            </p>
          </div>

          {/* Character Count */}
          <div className="flex justify-between text-xs text-gray-500">
            <span>{Constants.fromSubjectLinesConfig.characterCount.fromLines.replace('{count}', fromLines.length.toString())}</span>
            <span>{Constants.fromSubjectLinesConfig.characterCount.subjectLines.replace('{count}', subjectLines.length.toString())}</span>
          </div>
        </div>

        {/* Footer */}
        <div className="flex gap-3 p-6 border-t border-color-border">
          <Button
            variant="outline"
            onClick={handleClose}
            className="flex-1"
          >
            {Constants.fromSubjectLinesConfig.buttons.cancel}
          </Button>
          <Button
            onClick={handleSave}
            className="flex-1"
            disabled={!fromLines.trim() || !subjectLines.trim()}
          >
            {Constants.fromSubjectLinesConfig.buttons.save}
          </Button>
        </div>
      </div>
    </div>
  )
}

export default FromSubjectLinesModal

================================================================================
FILE: components/modals/index.ts
================================================================================

export { default as FileUploadModal } from './FileUploadModal'
export type { UploadType } from './FileUploadModal'
export { default as FromSubjectLinesModal } from './FromSubjectLinesModal'

================================================================================
FILE: components/ui/button.tsx
================================================================================

import * as React from "react"
import { Slot } from "@radix-ui/react-slot"
import { cva, type VariantProps } from "class-variance-authority"

import { cn } from "@/lib/utils"

const buttonVariants = cva(
  "inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium transition-all disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg:not([class*='size-'])]:size-4 shrink-0 [&_svg]:shrink-0 outline-none focus-visible:border-ring focus-visible:ring-ring/50 focus-visible:ring-[3px] aria-invalid:ring-destructive/20 dark:aria-invalid:ring-destructive/40 aria-invalid:border-destructive",
  {
    variants: {
      variant: {
        default:
          "bg-primary-400 text-white shadow-xs hover:bg-primary-500 cursor-pointer",
        destructive:
          "bg-red-500 text-white shadow-xs hover:bg-red-500/90 cursor-pointer",
        outline:
          "border border-primary-400 text-primary-400 shadow-xs hover:bg-primary-400/10 cursor-pointer",
        secondary:
          "bg-secondary text-white shadow-xs hover:bg-secondary/80 cursor-pointer",
        ghost:
          "hover:bg-primary-400 hover:text-white cursor-pointer",
        link: "text-primary underline-offset-4 hover:underline cursor-pointer",
      },
      size: {
        default: "h-12 px-4 py-2",
        xs: "h-8 px-2 py-1",
        sm: "h-10 rounded-md gap-1.5 px-3",
        lg: "h-14 rounded-md px-6",
        icon: "size-9",
      },
    },
    defaultVariants: {
      variant: "default",
      size: "default",
    },
  }
)

function Button({
  className,
  variant,
  size,
  asChild = false,
  ...props
}: React.ComponentProps<"button"> &
  VariantProps<typeof buttonVariants> & {
    asChild?: boolean
  }) {
  const Comp = asChild ? Slot : "button"

  return (
    <Comp
      data-slot="button"
      className={cn(buttonVariants({ variant, size, className }))}
      {...props}
    />
  )
}

export { Button, buttonVariants }

================================================================================
FILE: components/ui/card.tsx
================================================================================

import * as React from "react"

import { cn } from "@/lib/utils"

function Card({ className, ...props }: React.ComponentProps<"div">) {
  return (
    <div
      data-slot="card"
      className={cn(
        "bg-card text-card-foreground flex flex-col gap-6 rounded-xl border py-6 shadow-sm",
        className
      )}
      {...props}
    />
  )
}

function CardHeader({ className, ...props }: React.ComponentProps<"div">) {
  return (
    <div
      data-slot="card-header"
      className={cn(
        "@container/card-header grid auto-rows-min grid-rows-[auto_auto] items-start gap-1.5 px-6 has-data-[slot=card-action]:grid-cols-[1fr_auto] [.border-b]:pb-6",
        className
      )}
      {...props}
    />
  )
}

function CardTitle({ className, ...props }: React.ComponentProps<"div">) {
  return (
    <div
      data-slot="card-title"
      className={cn("leading-none font-semibold", className)}
      {...props}
    />
  )
}

function CardDescription({ className, ...props }: React.ComponentProps<"div">) {
  return (
    <div
      data-slot="card-description"
      className={cn("text-muted-foreground text-sm", className)}
      {...props}
    />
  )
}

function CardAction({ className, ...props }: React.ComponentProps<"div">) {
  return (
    <div
      data-slot="card-action"
      className={cn(
        "col-start-2 row-span-2 row-start-1 self-start justify-self-end",
        className
      )}
      {...props}
    />
  )
}

function CardContent({ className, ...props }: React.ComponentProps<"div">) {
  return (
    <div
      data-slot="card-content"
      className={cn("px-6", className)}
      {...props}
    />
  )
}

function CardFooter({ className, ...props }: React.ComponentProps<"div">) {
  return (
    <div
      data-slot="card-footer"
      className={cn("flex items-center px-6 [.border-t]:pt-6", className)}
      {...props}
    />
  )
}

export {
  Card,
  CardHeader,
  CardFooter,
  CardTitle,
  CardAction,
  CardDescription,
  CardContent,
}

================================================================================
FILE: components/ui/input.tsx
================================================================================

import * as React from "react"

import { cn } from "@/lib/utils"

function Input({ className, type, ...props }: React.ComponentProps<"input">) {
  return (
    <input
      type={type}
      data-slot="input"
      className={cn(
        "placeholder:text-color-muted-foreground selection:bg-color-primary selection:text-color-primary-foreground border-color-border flex h-12 w-full min-w-0 rounded-md border bg-transparent px-3 py-1 text-base shadow-xs transition-[color,box-shadow] outline-none disabled:pointer-events-none disabled:cursor-not-allowed disabled:opacity-50 md:text-sm",
        "focus-visible:border-blue-400 focus-visible:ring-blue-400/50 focus-visible:ring-[2px] focus-visible:ring-offset-0",
        "aria-invalid:ring-color-destructive/20 aria-invalid:border-color-destructive",
        className
      )}
      {...props}
    />
  )
}

export { Input }

================================================================================
FILE: components/ui/label.tsx
================================================================================

"use client"

import * as React from "react"
import * as LabelPrimitive from "@radix-ui/react-label"

import { cn } from "@/lib/utils"

function Label({
  className,
  ...props
}: React.ComponentProps<typeof LabelPrimitive.Root>) {
  return (
    <LabelPrimitive.Root
      data-slot="label"
      className={cn(
        "flex items-center gap-2 text-sm leading-none font-medium select-none group-data-[disabled=true]:pointer-events-none group-data-[disabled=true]:opacity-50 peer-disabled:cursor-not-allowed peer-disabled:opacity-50",
        className
      )}
      {...props}
    />
  )
}

export { Label }

================================================================================
FILE: components/ui/select.tsx
================================================================================

"use client"

import * as React from "react"
import * as SelectPrimitive from "@radix-ui/react-select"
import { CheckIcon, ChevronDownIcon, ChevronUpIcon } from "lucide-react"

import { cn } from "@/lib/utils"

function Select({
  ...props
}: React.ComponentProps<typeof SelectPrimitive.Root>) {
  return <SelectPrimitive.Root data-slot="select" {...props} />
}

function SelectGroup({
  ...props
}: React.ComponentProps<typeof SelectPrimitive.Group>) {
  return <SelectPrimitive.Group data-slot="select-group" {...props} />
}

function SelectValue({
  ...props
}: React.ComponentProps<typeof SelectPrimitive.Value>) {
  return <SelectPrimitive.Value data-slot="select-value" {...props} />
}

function SelectTrigger({
  className,
  size = "default",
  children,
  ...props
}: React.ComponentProps<typeof SelectPrimitive.Trigger> & {
  size?: "sm" | "default"
}) {
  return (
    <SelectPrimitive.Trigger
      data-slot="select-trigger"
      data-size={size}
              className={cn(
          "border-color-border data-[placeholder]:text-color-muted-foreground [&_svg:not([class*='text-'])]:text-color-muted-foreground focus-visible:border-blue-400 focus-visible:ring-blue-400/50 aria-invalid:ring-destructive/20 aria-invalid:border-color-destructive bg-transparent hover:bg-color-muted/30 flex w-fit items-center justify-between gap-2 rounded-md border px-3 py-2 text-base shadow-xs transition-[color,box-shadow] outline-none focus-visible:ring-2 focus-visible:ring-blue-400 focus-visible:ring-offset-0 disabled:cursor-not-allowed disabled:opacity-50 data-[size=default]:h-12 data-[size=sm]:h-10 *:data-[slot=select-value]:line-clamp-1 *:data-[slot=select-value]:flex *:data-[slot=select-value]:items-center *:data-[slot=select-value]:gap-2 [&_svg]:pointer-events-none [&_svg]:shrink-0 [&_svg:not([class*='size-'])]:size-4",
          className
        )}
      {...props}
    >
      {children}
      <SelectPrimitive.Icon asChild>
        <ChevronDownIcon className="size-4 text-color-muted-foreground" />
      </SelectPrimitive.Icon>
    </SelectPrimitive.Trigger>
  )
}

function SelectContent({
  className,
  children,
  position = "popper",
  ...props
}: React.ComponentProps<typeof SelectPrimitive.Content>) {
  return (
    <SelectPrimitive.Portal>
      <SelectPrimitive.Content
        data-slot="select-content"
        className={cn(
          "bg-white text-color-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 relative z-50 max-h-(--radix-select-content-available-height) min-w-[8rem] origin-(--radix-select-content-transform-origin) overflow-x-hidden overflow-y-auto rounded-md border border-color-border shadow-lg",
          position === "popper" &&
            "data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1",
          className
        )}
        position={position}
        {...props}
      >
        <SelectScrollUpButton />
        <SelectPrimitive.Viewport
          className={cn(
            "p-1",
            position === "popper" &&
              "h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)] scroll-my-1"
          )}
        >
          {children}
        </SelectPrimitive.Viewport>
        <SelectScrollDownButton />
      </SelectPrimitive.Content>
    </SelectPrimitive.Portal>
  )
}

function SelectLabel({
  className,
  ...props
}: React.ComponentProps<typeof SelectPrimitive.Label>) {
  return (
    <SelectPrimitive.Label
      data-slot="select-label"
      className={cn("text-color-muted-foreground px-2 py-1.5 text-xs", className)}
      {...props}
    />
  )
}

function SelectItem({
  className,
  children,
  ...props
}: React.ComponentProps<typeof SelectPrimitive.Item>) {
  return (
    <SelectPrimitive.Item
      data-slot="select-item"
              className={cn(
          "bg-white hover:bg-blue-50 hover:text-blue-700 focus:bg-blue-100 focus:text-blue-800 [&_svg:not([class*='text-'])]:text-color-muted-foreground relative flex w-full cursor-default items-center gap-2 rounded-sm py-3 pr-8 pl-3 text-base outline-hidden select-none data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:shrink-0 [&_svg:not([class*='size-'])]:size-4 *:[span]:last:flex *:[span]:last:items-center *:[span]:last:gap-2 transition-colors duration-150",
          className
        )}
      {...props}
    >
      <span className="absolute right-2 flex size-3.5 items-center justify-center">
        <SelectPrimitive.ItemIndicator>
          <CheckIcon className="size-4" />
        </SelectPrimitive.ItemIndicator>
      </span>
      <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>
    </SelectPrimitive.Item>
  )
}

function SelectSeparator({
  className,
  ...props
}: React.ComponentProps<typeof SelectPrimitive.Separator>) {
  return (
    <SelectPrimitive.Separator
      data-slot="select-separator"
      className={cn("bg-color-border pointer-events-none -mx-1 my-1 h-px", className)}
      {...props}
    />
  )
}

function SelectScrollUpButton({
  className,
  ...props
}: React.ComponentProps<typeof SelectPrimitive.ScrollUpButton>) {
  return (
    <SelectPrimitive.ScrollUpButton
      data-slot="select-scroll-up-button"
      className={cn(
        "flex cursor-default items-center justify-center py-1",
        className
      )}
      {...props}
    >
      <ChevronUpIcon className="size-4" />
    </SelectPrimitive.ScrollUpButton>
  )
}

function SelectScrollDownButton({
  className,
  ...props
}: React.ComponentProps<typeof SelectPrimitive.ScrollDownButton>) {
  return (
    <SelectPrimitive.ScrollDownButton
      data-slot="select-scroll-down-button"
      className={cn(
        "flex cursor-default items-center justify-center py-1",
        className
      )}
      {...props}
    />
  )
}

export {
  Select,
  SelectContent,
  SelectGroup,
  SelectItem,
  SelectLabel,
  SelectScrollDownButton,
  SelectScrollUpButton,
  SelectSeparator,
  SelectTrigger,
  SelectValue,
}

================================================================================
FILE: components/ui/separator.tsx
================================================================================

"use client"

import * as React from "react"
import * as SeparatorPrimitive from "@radix-ui/react-separator"

import { cn } from "@/lib/utils"

function Separator({
  className,
  orientation = "horizontal",
  decorative = true,
  ...props
}: React.ComponentProps<typeof SeparatorPrimitive.Root>) {
  return (
    <SeparatorPrimitive.Root
      data-slot="separator"
      decorative={decorative}
      orientation={orientation}
      className={cn(
        "bg-border shrink-0 data-[orientation=horizontal]:h-px data-[orientation=horizontal]:w-full data-[orientation=vertical]:h-full data-[orientation=vertical]:w-px",
        className
      )}
      {...props}
    />
  )
}

export { Separator }

================================================================================
FILE: components/ui/textarea.tsx
================================================================================

import * as React from "react"

import { cn } from "@/lib/utils"

function Textarea({ className, ...props }: React.ComponentProps<"textarea">) {
  return (
    <textarea
      data-slot="textarea"
      className={cn(
        "placeholder:text-color-muted-foreground selection:bg-color-primary selection:text-color-primary-foreground border-color-border flex w-full min-w-0 rounded-md border bg-transparent px-3 py-3 text-base shadow-xs transition-[color,box-shadow] outline-none disabled:pointer-events-none disabled:cursor-not-allowed disabled:opacity-50 md:text-sm min-h-[100px]",
        "focus-visible:border-blue-400 focus-visible:ring-blue-400/50 focus-visible:ring-[2px] focus-visible:ring-offset-0",
        "aria-invalid:ring-color-destructive/20 aria-invalid:border-color-destructive",
        className
      )}
      {...props}
    />
  )
}

export { Textarea }

================================================================================
FILE: hooks/useFileUpload.ts
================================================================================

import { useState, useCallback } from 'react'

export interface FileUploadState {
  selectedFile: File | null
  uploadStatus: 'idle' | 'uploading' | 'success' | 'error'
  errorMessage: string
  dragActive: boolean
}

export interface FileUploadHandlers {
  handleDrag: (e: React.DragEvent) => void
  handleDrop: (e: React.DragEvent) => void
  handleFileSelect: (file: File) => void
  handleFileInput: (e: React.ChangeEvent<HTMLInputElement>) => void
  resetState: () => void
}

export const useFileUpload = (
  allowedTypes: string[],
  maxSizeMB: number,
  onFileUpload: (file: File) => void
) => {
  const [state, setState] = useState<FileUploadState>({
    selectedFile: null,
    uploadStatus: 'idle',
    errorMessage: '',
    dragActive: false
  })

  const handleDrag = useCallback((e: React.DragEvent) => {
    e.preventDefault()
    e.stopPropagation()
    if (e.type === "dragenter" || e.type === "dragover") {
      setState(prev => ({ ...prev, dragActive: true }))
    } else if (e.type === "dragleave") {
      setState(prev => ({ ...prev, dragActive: false }))
    }
  }, [])

  const handleDrop = useCallback((e: React.DragEvent) => {
    e.preventDefault()
    e.stopPropagation()
    setState(prev => ({ ...prev, dragActive: false }))

    if (e.dataTransfer.files && e.dataTransfer.files[0]) {
      const file = e.dataTransfer.files[0]
      handleFileSelect(file)
    }
  }, [])

  const handleFileSelect = useCallback((file: File) => {
    const isValidType = allowedTypes.includes(file.type) || 
                       allowedTypes.some(type => file.name.endsWith(type)) ||
                       (file.name.toLowerCase().endsWith('.zip') && (
                         file.type === 'application/zip' ||
                         file.type === 'application/x-zip' ||
                         file.type === 'application/x-zip-compressed' ||
                         file.type === 'multipart/x-zip' ||
                         file.type === 'application/octet-stream' ||
                         file.type === ''
                       ));
    
    if (!isValidType) {
      setState(prev => ({
        ...prev,
        errorMessage: `Please select a valid file type: ${allowedTypes.join(', ')}`
      }))
      return
    }

    // Validate file size (skip if maxSizeMB is Infinity)
    if (maxSizeMB !== Infinity && file.size > maxSizeMB * 1024 * 1024) {
      setState(prev => ({
        ...prev,
        errorMessage: `File size must be less than ${maxSizeMB}MB`
      }))
      return
    }

    setState(prev => ({
      ...prev,
      selectedFile: file,
      errorMessage: ''
    }))
  }, [allowedTypes, maxSizeMB])

  const handleFileInput = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {
    if (e.target.files && e.target.files[0]) {
      handleFileSelect(e.target.files[0])
    }
  }, [handleFileSelect])

  const resetState = useCallback(() => {
    setState({
      selectedFile: null,
      uploadStatus: 'idle',
      errorMessage: '',
      dragActive: false
    })
  }, [])

  const startUpload = useCallback(async () => {
    if (!state.selectedFile) return

    setState(prev => ({ ...prev, uploadStatus: 'uploading' }))
    
         try {
       // Simulate upload process (replace with actual API call when needed)
       await new Promise(resolve => setTimeout(resolve, 2000))
      
      setState(prev => ({ ...prev, uploadStatus: 'success' }))
      onFileUpload(state.selectedFile)
      
      // Auto-close after success
      setTimeout(() => {
        resetState()
      }, 1500)
      
    } catch (error) {
      setState(prev => ({ 
        ...prev, 
        uploadStatus: 'error',
        errorMessage: 'Upload failed. Please try again.'
      }))
    }
  }, [state.selectedFile, onFileUpload, resetState])

  return {
    state,
    handlers: {
      handleDrag,
      handleDrop,
      handleFileSelect,
      handleFileInput,
      resetState
    },
    startUpload
  }
}

================================================================================
FILE: hooks/index.ts
================================================================================

// Export all custom hooks
export * from './useFileUpload'

================================================================================
FILE: lib/utils.ts
================================================================================

import { clsx, type ClassValue } from "clsx"
import { twMerge } from "tailwind-merge"

export function cn(...inputs: ClassValue[]) {
  return twMerge(clsx(inputs))
}

================================================================================
FILE: lib/db.ts
================================================================================

// lib/db.ts
import { Pool } from 'pg';

let pool: Pool | null = null;

export function getPool() {
  if (!pool) {
    if (!process.env.DATABASE_URL) {
      throw new Error('DATABASE_URL env var is required');
    }
    
    pool = new Pool({
      connectionString: process.env.DATABASE_URL,
      ssl: { rejectUnauthorized: false },
      max: 20,
      idleTimeoutMillis: 30000,
      connectionTimeoutMillis: 2000,
    });
  }
  return pool;
}


async function init() {
  const dbPool = getPool();
  await dbPool.query(`
    CREATE TABLE IF NOT EXISTS telegram_users (
      id SERIAL PRIMARY KEY,
      username VARCHAR(255) UNIQUE NOT NULL,
      chat_id BIGINT NOT NULL,
      first_name VARCHAR(255),
      created_at TIMESTAMP DEFAULT NOW(),
      updated_at TIMESTAMP DEFAULT NOW()
    );
  `);
  await dbPool.query(`
    CREATE TABLE IF NOT EXISTS creatives (
      id UUID PRIMARY KEY,
      affiliate_id TEXT,
      company_name TEXT,
      first_name TEXT,
      last_name TEXT,
      email TEXT,
      telegram_id TEXT,
      offer_id TEXT,
      creative_type TEXT,
      from_lines TEXT,
      subject_lines TEXT,
      notes TEXT,
      priority TEXT,
      created_at TIMESTAMP DEFAULT NOW()
    );
  `);
  await dbPool.query(`
    CREATE TABLE IF NOT EXISTS creative_files (
      id UUID PRIMARY KEY,
      creative_id UUID REFERENCES creatives(id) ON DELETE CASCADE,
      file_name TEXT,
      file_url TEXT,
      file_type TEXT,
      file_size BIGINT
    );
  `);
  
  await dbPool.query(`
    CREATE TABLE IF NOT EXISTS telegram_state (
      key TEXT PRIMARY KEY,
      value TEXT,
      updated_at TIMESTAMP DEFAULT NOW()
    )
  `);
}

================================================================================
FILE: lib/emailService.ts
================================================================================

import * as nodemailer from 'nodemailer';

let transporter: nodemailer.Transporter | null = null;

function getTransporter() {
  if (!transporter) {
    if (!process.env.SMTP_HOST || !process.env.SMTP_PORT || !process.env.SMTP_USER || !process.env.SMTP_PASS) {
      throw new Error('SMTP env vars missing (SMTP_HOST, SMTP_PORT, SMTP_USER, SMTP_PASS)');
    }
    
    transporter = nodemailer.createTransporter({
      host: process.env.SMTP_HOST,
      port: parseInt(process.env.SMTP_PORT as string, 10),
      secure: false,
      auth: { user: process.env.SMTP_USER, pass: process.env.SMTP_PASS },
    });
  }
  return transporter;
}

export const createSubmissionEmail = (data: { contactName: string; priority: string; trackingLink: string; }) => `
<!DOCTYPE html><html><head><meta charset="utf-8"><meta name="viewport" content="width=device-width,initial-scale=1"><style>
body{font-family:Arial,sans-serif;line-height:1.6;color:#333}.container{max-width:600px;margin:0 auto;padding:20px}.header{background:#3b82f6;color:#fff;padding:20px;text-align:center}.content{padding:20px;background:#f9fafb}.tracking-link{background:#e0e7ff;padding:15px;border-radius:8px;margin:20px 0}.footer{text-align:center;padding:20px;color:#6b7280;font-size:14px}
</style></head><body><div class="container"><div class="header"><h1>Submission Confirmed!</h1></div><div class="content">
<p>Hello ${data.contactName},</p><p>Thank you for your submission! We have received your creative.</p>
<p><strong>Priority:</strong> ${data.priority}</p>
<div class="tracking-link"><strong>Your Tracking Link:</strong><br><a href="${data.trackingLink}" style="color:#3b82f6">${data.trackingLink}</a></div>
<p>You can use this link to track your submission.</p><p>Best,<br>Big Drops Marketing Team</p></div>
<div class="footer"><p>This is an automated message. Please do not reply.</p></div></div></body></html>
`;

export async function sendEmail(opts: { to: string; subject: string; html: string }) {
  const emailTransporter = getTransporter();
  const info = await emailTransporter.sendMail({
    from: `"Big Drops Marketing" <${process.env.SMTP_USER}>`,
    to: opts.to, subject: opts.subject, html: opts.html
  });
  return { success: true, messageId: info.messageId };
}

================================================================================
FILE: lib/everflow.ts
================================================================================

const BASE = process.env.EVERFLOW_BASE_URL || 'https://api.eflow.team/v1';
const KEY = process.env.EVERFLOW_API_KEY || '';

export async function fetchOffers(search?: string) {
  if (!KEY) {

    return [];
  }
  const url = new URL(`${BASE}/offers`);
  if (search) url.searchParams.set('search', search);
  const res = await fetch(url.toString(), { headers: { Authorization: `Bearer ${KEY}` }});
  if (!res.ok) throw new Error(`Everflow error ${res.status}`);
  const data = await res.json();

  return (data.items || data).map((o: { offer_id?: string; id?: string; name: string }) => ({ 
    label: `${o.offer_id || o.id} — ${o.name}`, 
    value: String(o.offer_id || o.id) 
  }));
}

================================================================================
FILE: lib/fileStorage.ts
================================================================================

import { randomUUID } from 'crypto';
import { promises as fs } from 'fs';
import * as path from 'path';

const ROOT = '/tmp/creatives';
async function ensureDir(dir: string) { await fs.mkdir(dir, { recursive: true }); }

export async function saveBuffer(buf: Buffer, originalName: string) {
  const id = randomUUID();
  const safeName = originalName.replace(/[^\w.\-]+/g, '_');
  const dir = path.join(ROOT, id);
  await ensureDir(dir);
  const full = path.join(dir, safeName);
  await fs.writeFile(full, buf);
  return { id, fileName: safeName };
}

export async function getFilePath(id: string, fileName: string) {
  return path.join(ROOT, id, fileName);
}

================================================================================
FILE: utils/index.ts
================================================================================

// Export all utility functions
export * from './validations'
export * from './errorHandling'

================================================================================
FILE: utils/validations.ts
================================================================================

// File validation constants
export const FILE_VALIDATION = {
  SINGLE_CREATIVE: {
    ALLOWED_TYPES: ['image/jpeg', 'image/png', 'image/gif', 'image/webp', 'text/html', 'application/zip'],
    MAX_SIZE_MB: Infinity,
    ACCEPT_EXTENSIONS: '.jpg,.jpeg,.png,.gif,.webp,.html,.zip'
    // TODO: BACKEND INTEGRATION - Client-side validation only
    // 
    // BACKEND DEVELOPER NOTES:
    // 1. These validations are for user experience only
    // 2. Server-side validation is MANDATORY for security
    // 3. Implement comprehensive file validation on server
    // 4. Add file signature validation (magic bytes)
    // 5. Implement MIME type verification
    // 6. Add file content analysis
    // 7. Consider implementing file quarantine system
    // 8. Add rate limiting per user/IP
    // 9. Implement file scanning for malware
    // 10. Add file integrity checks (checksums)
  },
  MULTIPLE_CREATIVES: {
    ALLOWED_TYPES: ['application/zip'],
    MAX_SIZE_MB: Infinity,
    ACCEPT_EXTENSIONS: '.zip'
    // TODO: BACKEND INTEGRATION - ZIP validation
    // 
    // BACKEND DEVELOPER NOTES:
    // 1. Implement ZIP file structure validation
    // 2. Add ZIP bomb protection (recursive extraction limits)
    // 3. Validate ZIP file integrity
    // 4. Implement file count limits
    // 5. Add path traversal protection
    // 6. Implement file size distribution limits
    // 7. Add ZIP file header validation
    // 8. Consider implementing ZIP preview
    // 9. Add support for password-protected ZIPs
    // 10. Implement ZIP file compression analysis
  }
}

// Form field validation
export const validateRequired = (value: string): boolean => {
  return value.trim().length > 0
}

export const validateEmail = (email: string): boolean => {
  const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/
  return emailRegex.test(email)
}

export const validateTelegramId = (telegramId: string): boolean => {
  if (!telegramId || telegramId === '@') return false
  const telegramRegex = /^@[a-zA-Z0-9_]{5,32}$/
  return telegramRegex.test(telegramId)
}

export const validateFileType = (file: File, allowedTypes: string[]): boolean => {
  return allowedTypes.includes(file.type) || 
         allowedTypes.some(type => file.name.toLowerCase().endsWith(type.toLowerCase()))
}

export const validateFileSize = (file: File, maxSizeMB: number): boolean => {
  return file.size <= maxSizeMB * 1024 * 1024
}

// Form validation helpers
export const getFieldError = (fieldName: string, value: string, isRequired: boolean = true): string => {
  if (isRequired && !validateRequired(value)) {
    return `${fieldName} is required`
  }
  
  if (fieldName === 'email' && value && !validateEmail(value)) {
    return 'Please enter a valid email address'
  }
  
  if (fieldName === 'telegramId' && value && !validateTelegramId(value)) {
    return 'Please enter a valid Telegram ID (e.g., @username)'
  }
  
  return ''
}

// File upload validation
export const validateFileUpload = (
  file: File, 
  allowedTypes: string[], 
  maxSizeMB: number
): { isValid: boolean; errorMessage: string } => {
  if (!validateFileType(file, allowedTypes)) {
    return {
      isValid: false,
      errorMessage: `Please select a valid file type: ${allowedTypes.join(', ')}`
    }
  }
  
  if (!validateFileSize(file, maxSizeMB)) {
    return {
      isValid: false,
      errorMessage: `File size must be less than ${maxSizeMB}MB`
    }
  }
  
  return { isValid: true, errorMessage: '' }
}

================================================================================
FILE: utils/errorHandling.ts
================================================================================

// Error types
export enum ErrorType {
  VALIDATION = 'VALIDATION',
  NETWORK = 'NETWORK',
  UPLOAD = 'UPLOAD',
  AUTHENTICATION = 'AUTHENTICATION',
  UNKNOWN = 'UNKNOWN'
}

export interface AppError {
  type: ErrorType
  message: string
  code?: string
  details?: unknown
  timestamp: Date
}

// Error messages
export const ERROR_MESSAGES = {
  VALIDATION: {
    REQUIRED_FIELD: 'This field is required',
    INVALID_EMAIL: 'Please enter a valid email address',
    INVALID_TELEGRAM_ID: 'Please enter a valid Telegram ID',
    FILE_TOO_LARGE: 'File size exceeds the maximum limit',
    INVALID_FILE_TYPE: 'File type not supported',
    INVALID_OFFER: 'Please select a valid offer'
  },
  NETWORK: {
    CONNECTION_FAILED: 'Connection failed. Please check your internet connection.',
    TIMEOUT: 'Request timed out. Please try again.',
    SERVER_ERROR: 'Server error. Please try again later.',
    API_UNAVAILABLE: 'Service temporarily unavailable.'
  },
  UPLOAD: {
    FAILED: 'File upload failed. Please try again.',
    INCOMPLETE: 'Upload incomplete. Please try again.',
    STORAGE_FULL: 'Storage limit reached. Please contact support.',
    VIRUS_DETECTED: 'File rejected due to security concerns.'
  },
  AUTHENTICATION: {
    INVALID_CREDENTIALS: 'Invalid credentials. Please try again.',
    SESSION_EXPIRED: 'Session expired. Please log in again.',
    INSUFFICIENT_PERMISSIONS: 'You do not have permission to perform this action.',
    ACCOUNT_LOCKED: 'Account temporarily locked. Please contact support.'
  }
}

// Error creation
export const createError = (
  type: ErrorType,
  message: string,
  code?: string,
  details?: unknown
): AppError => {
  return {
    type,
    message,
    code,
    details,
    timestamp: new Date()
  }
}

// Error handling functions
export const handleValidationError = (fieldName: string, value: string): AppError => {
  if (!value.trim()) {
    return createError(
      ErrorType.VALIDATION,
      ERROR_MESSAGES.VALIDATION.REQUIRED_FIELD,
      'REQUIRED_FIELD'
    )
  }
  
  if (fieldName === 'email' && !isValidEmail(value)) {
    return createError(
      ErrorType.VALIDATION,
      ERROR_MESSAGES.VALIDATION.INVALID_EMAIL,
      'INVALID_EMAIL'
    )
  }
  
  if (fieldName === 'telegramId' && !isValidTelegramId(value)) {
    return createError(
      ErrorType.VALIDATION,
      ERROR_MESSAGES.VALIDATION.INVALID_TELEGRAM_ID,
      'INVALID_TELEGRAM_ID'
    )
  }
  
  return createError(
    ErrorType.VALIDATION,
    `Invalid ${fieldName}`,
    'INVALID_FIELD'
  )
}

export const handleUploadError = (error: { code?: string }): AppError => {
  if (error.code === 'FILE_TOO_LARGE') {
    return createError(
      ErrorType.UPLOAD,
      ERROR_MESSAGES.UPLOAD.FAILED,
      'FILE_TOO_LARGE'
    )
  }
  
  if (error.code === 'INVALID_FILE_TYPE') {
    return createError(
      ErrorType.UPLOAD,
      ERROR_MESSAGES.UPLOAD.FAILED,
      'INVALID_FILE_TYPE'
    )
  }
  
  return createError(
    ErrorType.UPLOAD,
    ERROR_MESSAGES.UPLOAD.FAILED,
    'UPLOAD_FAILED'
  )
}

export const handleNetworkError = (error: { code?: string }): AppError => {
  if (error.code === 'NETWORK_ERROR') {
    return createError(
      ErrorType.NETWORK,
      ERROR_MESSAGES.NETWORK.CONNECTION_FAILED,
      'NETWORK_ERROR'
    )
  }
  
  if (error.code === 'TIMEOUT') {
    return createError(
      ErrorType.NETWORK,
      ERROR_MESSAGES.NETWORK.TIMEOUT,
      'TIMEOUT'
    )
  }
  
  return createError(
    ErrorType.NETWORK,
    ERROR_MESSAGES.NETWORK.SERVER_ERROR,
    'SERVER_ERROR'
  )
}

// Helper functions
const isValidEmail = (email: string): boolean => {
  const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/
  return emailRegex.test(email)
}

const isValidTelegramId = (telegramId: string): boolean => {
  if (!telegramId || telegramId === '@') return false
  const telegramRegex = /^@[a-zA-Z0-9_]{5,32}$/
  return telegramRegex.test(telegramId)
}

// Error logging
export const logError = (error: AppError): void => {
  console.error('Application Error:', {
    type: error.type,
    message: error.message,
    code: error.code,
    timestamp: error.timestamp,
    details: error.details
  })
  
  // TODO: BACKEND INTEGRATION - Send error to logging service
  // Example: sendToLoggingService(error)
}

// User-friendly error messages
export const getUserFriendlyMessage = (error: AppError): string => {
  switch (error.type) {
    case ErrorType.VALIDATION:
      return error.message
    case ErrorType.NETWORK:
      return ERROR_MESSAGES.NETWORK.CONNECTION_FAILED
    case ErrorType.UPLOAD:
      return ERROR_MESSAGES.UPLOAD.FAILED
    case ErrorType.AUTHENTICATION:
      return ERROR_MESSAGES.AUTHENTICATION.INVALID_CREDENTIALS
    default:
      return 'Something went wrong. Please try again.'
  }
}

================================================================================
FILE: constants/index.ts
================================================================================

// Export all constants
export * from './fileUpload'

// Telegram Bot Configuration
export const TELEGRAM_BOT_URL = 'https://t.me/BigDropsMarketingBot?start=from_web_form'

================================================================================
FILE: constants/fileUpload.ts
================================================================================

// File upload configuration interface
interface FileUploadConfigItem {
  ALLOWED_TYPES: string[]
  MAX_SIZE_MB: number
  ACCEPT_EXTENSIONS: string
  LABEL: string
  DESCRIPTION: string
  PLACEHOLDER: string
  REQUIREMENTS: string[]
}

// File upload configurations
export const FILE_UPLOAD_CONFIG: Record<string, FileUploadConfigItem> = {
  SINGLE_CREATIVE: {
    ALLOWED_TYPES: ['image/jpeg', 'image/png', 'image/gif', 'image/webp', 'text/html', 'application/zip'],
    MAX_SIZE_MB: Infinity,
    ACCEPT_EXTENSIONS: '.jpg,.jpeg,.png,.gif,.webp,.html,.zip',
    LABEL: 'Single Creative',
    DESCRIPTION: 'Upload a single creative file',
    PLACEHOLDER: 'Drop your creative file here or click to browse',
    REQUIREMENTS: []
    // TODO: BACKEND INTEGRATION - Update file type validation
    // 
    // BACKEND DEVELOPER NOTES:
    // 1. These are client-side validations only
    // 2. Server-side validation MUST be implemented
    // 3. Consider adding: .svg, .pdf, .docx for broader support
    // 4. Implement MIME type checking on server
    // 5. Add file signature validation (magic bytes)
    // 6. Consider file content analysis for security
    // 7. Add virus scanning for all uploaded files
    // 8. Implement file size limits based on user tier
    // 9. Add file format conversion capabilities
    // 10. Consider implementing file preview generation
  },
  MULTIPLE_CREATIVES: {
    ALLOWED_TYPES: ['application/zip'],
    MAX_SIZE_MB: Infinity,
    ACCEPT_EXTENSIONS: '.zip',
    LABEL: 'Multiple Creatives',
    DESCRIPTION: 'Upload multiple creatives in a ZIP file',
    PLACEHOLDER: 'Drop your ZIP file here or click to browse',
    REQUIREMENTS: [
      'Supported formats: JPEG, PNG, GIF, WebP, HTML',
      'All files will be extracted and processed'
    ]
    // TODO: BACKEND INTEGRATION - ZIP file processing
    // 
    // BACKEND DEVELOPER NOTES:
    // 1. Implement ZIP file extraction on server
    // 2. Validate each extracted file individually
    // 3. Handle nested ZIP files (ZIP within ZIP)
    // 4. Implement file path sanitization
    // 5. Add ZIP bomb protection
    // 6. Limit maximum files per ZIP
    // 7. Implement file deduplication
    // 8. Add progress tracking for large ZIPs
    // 9. Handle corrupted ZIP files gracefully
    // 10. Implement batch processing for extracted files
  }
}

// Upload status messages
export const UPLOAD_STATUS_MESSAGES = {
  IDLE: {
    SINGLE: 'Drop your creative file here or click to browse',
    MULTIPLE: 'Drop your ZIP file here or click to browse'
  },
  UPLOADING: {
    SINGLE: 'Uploading...',
    MULTIPLE: 'Processing ZIP...'
  },
  SUCCESS: {
    SINGLE: 'Creative uploaded successfully!',
    MULTIPLE: 'Multiple creatives uploaded successfully!'
  },
  ERROR: {
    SINGLE: 'Upload failed. Please try again.',
    MULTIPLE: 'Upload failed. Please try again.'
  }
}

// File type icons
export const FILE_TYPE_ICONS = {
  IMAGE: '🖼️',
  HTML: '🌐',
  ZIP: '📦',
  UNKNOWN: '📄'
}

// File size formatting
export const formatFileSize = (bytes: number): string => {
  if (bytes === 0) return '0 Bytes'
  
  const k = 1024
  const sizes = ['Bytes', 'KB', 'MB', 'GB']
  const i = Math.floor(Math.log(bytes) / Math.log(k))
  
  return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i]
}

// File type detection
export const getFileType = (fileName: string): string => {
  const extension = fileName.split('.').pop()?.toLowerCase()
  
  switch (extension) {
    case 'jpg':
    case 'jpeg':
    case 'png':
    case 'gif':
    case 'webp':
      return 'image'
    case 'html':
    case 'htm':
      return 'html'
    case 'zip':
      return 'zip'
    default:
      return 'unknown'
  }
}

// File validation rules
export const FILE_VALIDATION_RULES = {
  IMAGE: {
    MAX_DIMENSIONS: { width: 4096, height: 4096 },
    MIN_DIMENSIONS: { width: 100, height: 100 },
    ALLOWED_FORMATS: ['jpg', 'jpeg', 'png', 'gif', 'webp']
  },
  HTML: {
    MAX_SIZE_KB: 500,
    ALLOWED_TAGS: ['div', 'span', 'p', 'h1', 'h2', 'h3', 'h4', 'h5', 'h6', 'img', 'a', 'button']
  },
  ZIP: {
    MAX_FILES: 100,
    MAX_DEPTH: 5,
    ALLOWED_CONTENT: ['image', 'html']
  }
}
